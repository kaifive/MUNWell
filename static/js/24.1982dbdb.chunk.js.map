{"version":3,"sources":["views/awards/ParticipationAwards.js"],"names":["fieldsCommittee","fieldsDelegation","ParticipationAwards","user","useAuth0","isAuthenticated","modalAdd","setModalAdd","useState","awardsState","setAwardsState","type","delegate","position","delegation","committee","data","setData","registrationData","committeeData","awardTypes","settings","isLoading","setIsLoading","openModal","async","fetchData","sub","then","res","JSON","stringify","prevState","length","getData","_jsx","children","_jsxs","_Fragment","CRow","CCol","CCard","CCardHeader","CCardBody","className","lg","CButton","block","color","onClick","CDataTable","items","fields","hover","striped","sorter","itemsPerPage","pagination","scopedSlots","item","participationAwardsPDFLayout1","CModal","show","onClose","size","CModalHeader","CModalTitle","CModalBody","CForm","action","method","encType","CFormGroup","row","md","CLabel","htmlFor","xs","CSelect","custom","name","value","onChange","e","val","target","getCommittees","CInput","placeholder","getDelegations","CModalFooter","checkLicense","result","alert","i","awardData","chair","customParticipationAwardLayout1"],"mappings":"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","file":"static/js/24.1982dbdb.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport { useAuth0 } from \"@auth0/auth0-react\";\r\nimport {\r\n    CButton,\r\n    CCard,\r\n    CCardBody,\r\n    CCardHeader,\r\n    CCol,\r\n    CDataTable,\r\n    CForm,\r\n    CFormGroup,\r\n    CInput,\r\n    CLabel,\r\n    CModal,\r\n    CModalBody,\r\n    CModalFooter,\r\n    CModalHeader,\r\n    CModalTitle,\r\n    CRow,\r\n    CSelect\r\n} from '@coreui/react'\r\nimport { participationAwardsPDFLayout1, customParticipationAwardLayout1 } from 'src/reusable/jsPDF'\r\n\r\n//import registrationData from '../../data/MockData/MockRegistration'\r\n//import committeeData from '../../data/MockData/MockCommittees'\r\nimport fetchData from '../../data/LiveData/FetchData'\r\n\r\nimport { getDelegations, getCommittees } from './awardHelper'\r\nimport { checkLicense } from 'src/reusable/checkLicense';\r\n\r\nconst fieldsCommittee = [\r\n    'division',\r\n    'category',\r\n    'committee',\r\n    'abbreviation',\r\n    'download'\r\n]\r\n\r\nconst fieldsDelegation = [\r\n    'delegation',\r\n    'contact',\r\n    'email',\r\n    'download'\r\n]\r\n\r\nconst ParticipationAwards = () => {\r\n    const { user } = useAuth0()\r\n    const { isAuthenticated } = useAuth0()\r\n\r\n    const [modalAdd, setModalAdd] = useState(false)\r\n\r\n    const [awardsState, setAwardsState] = useState({\r\n        type: '',\r\n        delegate: '',\r\n        position: '',\r\n        delegation: '',\r\n        committee: ''\r\n    })\r\n\r\n    const [data, setData] = useState({\r\n        registrationData: [],\r\n        committeeData: [],\r\n        awardTypes: [],\r\n        settings: []\r\n    });\r\n\r\n    const [isLoading, setIsLoading] = useState(true)\r\n\r\n    function openModal() {\r\n        setAwardsState({\r\n            position: '',\r\n            delegation: '',\r\n            committee: ''\r\n        })\r\n\r\n        setModalAdd(!modalAdd)\r\n    }\r\n\r\n    function createAwardLayout1() {\r\n        checkLicense(user.sub)\r\n            .then(result => {\r\n                if (result === 0) {\r\n                    alert(\"No valid MUNWell License found! \\nUpload a valid MUNWell License to be able to configure data.\")\r\n                } else {\r\n                    let awardData = awardsState\r\n\r\n                    let i;\r\n                    for (i = 0; i < data.committeeData.length; i++) {\r\n                        if (JSON.stringify(awardData.committee) === JSON.stringify(data.committeeData[i].committee)) {\r\n                            awardData[\"chair\"] = data.committeeData[i].chair\r\n                        }\r\n                    }\r\n\r\n                    customParticipationAwardLayout1(awardData, data.settings)\r\n                }\r\n            })\r\n\r\n        setModalAdd(false)\r\n    }\r\n\r\n    async function getData() {\r\n        await fetchData(\"/api/get/committee\", user.sub).then((res) => {\r\n            if (JSON.stringify(res) !== JSON.stringify(data.committeeData)) {\r\n                setData(prevState => {\r\n                    return { ...prevState, committeeData: res }\r\n                })\r\n            }\r\n        })\r\n\r\n        await fetchData(\"/api/get/registrationData\", user.sub).then((res) => {\r\n            if (JSON.stringify(res) !== JSON.stringify(data.registrationData)) {\r\n                setData(prevState => {\r\n                    return { ...prevState, registrationData: res }\r\n                })\r\n            }\r\n        })\r\n\r\n        await fetchData(\"/api/get/settings\", user.sub).then((res) => {\r\n            if (JSON.stringify(res[res.length - 1]) !== JSON.stringify(data.settings)) {\r\n                setData(prevState => {\r\n                    return { ...prevState, settings: res[res.length - 1] }\r\n                })\r\n            }\r\n        })\r\n\r\n        await fetchData('/api/get/awardType', user.sub).then((res) => {\r\n            if (JSON.stringify(res) !== JSON.stringify(data.awardTypes)) {\r\n                setData(prevState => {\r\n                    return { ...prevState, awardTypes: res }\r\n                })\r\n            }\r\n        })\r\n    }\r\n\r\n    if (isAuthenticated) {\r\n        getData().then(() => {\r\n            if (isLoading) {\r\n                setIsLoading(false)\r\n            }\r\n        })\r\n    }\r\n\r\n    return !isLoading ? (\r\n        <>\r\n            <CRow>\r\n                <CCol>\r\n                    <CCard>\r\n                        <CCardHeader>\r\n                            Participation Awards by Committee\r\n                        </CCardHeader>\r\n                        <CCardBody>\r\n                            <CRow className=\"align-items-left\">\r\n                                <CCol lg=\"3\">\r\n                                    <CButton block color=\"primary\" onClick={() => openModal()}>Custom Participation Award</CButton>\r\n                                </CCol>\r\n                            </CRow>\r\n                            <br></br>\r\n                            <CDataTable\r\n                                items={data.committeeData}\r\n                                fields={fieldsCommittee}\r\n                                hover\r\n                                striped\r\n                                sorter\r\n                                itemsPerPage={10}\r\n                                pagination\r\n                                scopedSlots={{\r\n                                    'download':\r\n                                        (item) => (\r\n                                            <td>\r\n                                                <CButton block color=\"primary\" onClick={() => participationAwardsPDFLayout1(item, \"Committee\", data.settings, data.committeeData)}>Download</CButton>\r\n                                            </td>\r\n                                        )\r\n                                }}\r\n                            />\r\n                        </CCardBody>\r\n                    </CCard>\r\n                </CCol>\r\n            </CRow>\r\n            <CRow>\r\n                <CCol>\r\n                    <CCard>\r\n                        <CCardHeader>\r\n                            Participation Awards by Delegation\r\n                        </CCardHeader>\r\n                        <CCardBody>\r\n                            <CRow className=\"align-items-left\">\r\n                                <CCol lg=\"3\">\r\n                                    <CButton block color=\"primary\" onClick={() => openModal()}>Custom Participation Award</CButton>\r\n                                </CCol>\r\n                            </CRow>\r\n                            <br></br>\r\n                            <CDataTable\r\n                                items={data.registrationData}\r\n                                fields={fieldsDelegation}\r\n                                hover\r\n                                striped\r\n                                sorter\r\n                                itemsPerPage={10}\r\n                                pagination\r\n                                scopedSlots={{\r\n                                    'download':\r\n                                        (item) => (\r\n                                            <td>\r\n                                                <CButton block color=\"primary\" onClick={() => participationAwardsPDFLayout1(item, \"Delegation\", data.settings, data.committeeData)}>Download</CButton>\r\n                                            </td>\r\n                                        )\r\n                                }}\r\n                            />\r\n                        </CCardBody>\r\n                    </CCard>\r\n                </CCol>\r\n            </CRow>\r\n\r\n            <CModal show={modalAdd} onClose={setModalAdd} size=\"lg\">\r\n                <CModalHeader>\r\n                    <CModalTitle>Create Custom Participation Award</CModalTitle>\r\n                </CModalHeader>\r\n                <CModalBody>\r\n                    <CForm action=\"\" method=\"post\" encType=\"multipart/form-data\" className=\"form-horizontal\">\r\n                        <CFormGroup row>\r\n                            <CCol md=\"3\">\r\n                                <CLabel htmlFor=\"award-committee\">Committee</CLabel>\r\n                            </CCol>\r\n                            <CCol xs=\"12\" md=\"8\">\r\n                                <CSelect custom name=\"awardCommittee\" value={awardsState.committee} onChange={e => {\r\n                                    const val = e.target.value\r\n                                    setAwardsState(prevState => {\r\n                                        return { ...prevState, committee: val }\r\n                                    });\r\n                                }}>\r\n                                    {getCommittees(data.committeeData)}\r\n                                </CSelect>\r\n                            </CCol>\r\n                        </CFormGroup>\r\n                        <CFormGroup row>\r\n                            <CCol md=\"3\">\r\n                                <CLabel htmlFor=\"award-pos\">Position</CLabel>\r\n                            </CCol>\r\n                            <CCol xs=\"12\" md=\"8\">\r\n                                <CInput name=\"awardPos\" placeholder=\"Position\" value={awardsState.position} onChange={e => {\r\n                                    const val = e.target.value\r\n                                    setAwardsState(prevState => {\r\n                                        return { ...prevState, position: val }\r\n                                    });\r\n                                }} />\r\n                            </CCol>\r\n                        </CFormGroup>\r\n                        <CFormGroup row>\r\n                            <CCol md=\"3\">\r\n                                <CLabel htmlFor=\"award-delegation\">Delegation</CLabel>\r\n                            </CCol>\r\n                            <CCol xs=\"12\" md=\"8\">\r\n                                <CSelect custom name=\"awardDelegation\" value={awardsState.delegation} onChange={e => {\r\n                                    const val = e.target.value\r\n                                    setAwardsState(prevState => {\r\n                                        return { ...prevState, delegation: val }\r\n                                    });\r\n                                }}>\r\n                                    {getDelegations(data.registrationData)}\r\n                                </CSelect>\r\n                            </CCol>\r\n                        </CFormGroup>\r\n                    </CForm>\r\n                </CModalBody>\r\n                <CModalFooter>\r\n                    <CButton color=\"secondary\" onClick={() => setModalAdd(false)}>Cancel</CButton>\r\n                    <CButton color=\"primary\" onClick={() => createAwardLayout1()}>Download</CButton>\r\n                </CModalFooter>\r\n            </CModal>\r\n        </>\r\n    ) : (<p>Waiting for Data...</p>)\r\n}\r\n\r\nexport default ParticipationAwards"],"sourceRoot":""}
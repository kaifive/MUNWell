{"version":3,"sources":["views/awards/CommitteeAwards.js"],"names":["fields","CommitteeAwards","user","useAuth0","isAuthenticated","modalAdd","setModalAdd","useState","awardsState","setAwardsState","type","delegate","position","delegation","committee","data","setData","registrationData","committeeData","awardTypes","settings","awards","isLoading","setIsLoading","async","fetchData","sub","then","res","JSON","stringify","prevState","length","getData","_jsx","children","_jsxs","_Fragment","CRow","CCol","CCard","CCardHeader","CCardBody","className","lg","CButton","block","color","onClick","chair","CDataTable","items","hover","striped","sorter","itemsPerPage","pagination","scopedSlots","item","committeeAwardsPDFLayout1","CModal","show","onClose","size","CModalHeader","CModalTitle","CModalBody","CForm","action","method","encType","CFormGroup","row","md","CLabel","htmlFor","xs","CSelect","custom","name","value","onChange","e","val","target","getAwardTypes","getCommittees","CInput","placeholder","getDelegations","CModalFooter","checkLicense","result","alert","i","awardData","customCommitteeAwardLayout1"],"mappings":"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","file":"static/js/23.ad6939b6.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport { useAuth0 } from \"@auth0/auth0-react\";\r\nimport {\r\n    CButton,\r\n    CCard,\r\n    CCardBody,\r\n    CCardHeader,\r\n    CCol,\r\n    CDataTable,\r\n    CForm,\r\n    CFormGroup,\r\n    CInput,\r\n    CLabel,\r\n    CModal,\r\n    CModalBody,\r\n    CModalFooter,\r\n    CModalHeader,\r\n    CModalTitle,\r\n    CRow,\r\n    CSelect\r\n} from '@coreui/react'\r\n\r\nimport fetchData from '../../data/LiveData/FetchData'\r\n\r\nimport { committeeAwardsPDFLayout1, customCommitteeAwardLayout1 } from 'src/reusable/jsPDF'\r\nimport { getAwardTypes, getDelegations, getCommittees } from './awardHelper'\r\nimport { checkLicense } from 'src/reusable/checkLicense';\r\n\r\nconst fields = [\r\n    'division',\r\n    'category',\r\n    'committee',\r\n    'abbreviation',\r\n    'download'\r\n]\r\n\r\nconst CommitteeAwards = () => {\r\n    const { user } = useAuth0()\r\n    const { isAuthenticated } = useAuth0()\r\n\r\n    const [modalAdd, setModalAdd] = useState(false)\r\n\r\n    const [awardsState, setAwardsState] = useState({\r\n        type: '',\r\n        delegate: '',\r\n        position: '',\r\n        delegation: '',\r\n        committee: ''\r\n    })\r\n\r\n    const [data, setData] = useState({\r\n        registrationData: [],\r\n        committeeData: [],\r\n        awardTypes: [],\r\n        settings: [],\r\n        awards: []\r\n    });\r\n\r\n    const [isLoading, setIsLoading] = useState(true)\r\n\r\n    function openModal() {\r\n        setAwardsState({\r\n            type: '',\r\n            delegate: '',\r\n            position: '',\r\n            delegation: '',\r\n            committee: '',\r\n            chair: ''\r\n        })\r\n\r\n        setModalAdd(!modalAdd)\r\n    }\r\n\r\n    function createAwardLayout1() {\r\n        checkLicense(user.sub)\r\n            .then(result => {\r\n                if (result === 0) {\r\n                    alert(\"No valid MUNWell License found! \\nUpload a valid MUNWell License to be able to configure data.\")\r\n                } else {\r\n                    let awardData = awardsState\r\n\r\n                    let i;\r\n                    for (i = 0; i < data.committeeData.length; i++) {\r\n                        if (JSON.stringify(awardData.committee) === JSON.stringify(data.committeeData[i].committee)) {\r\n                            awardData[\"chair\"] = data.committeeData[i].chair\r\n                        }\r\n                    }\r\n\r\n                    customCommitteeAwardLayout1(awardData, data.settings)\r\n                }\r\n            })\r\n\r\n        setModalAdd(false)\r\n    }\r\n\r\n    async function getData() {\r\n        await fetchData(\"/api/get/committee\", user.sub).then((res) => {\r\n            if (JSON.stringify(res) !== JSON.stringify(data.committeeData)) {\r\n                setData(prevState => {\r\n                    return { ...prevState, committeeData: res }\r\n                })\r\n            }\r\n        })\r\n\r\n        await fetchData(\"/api/get/registrationData\", user.sub).then((res) => {\r\n            if (JSON.stringify(res) !== JSON.stringify(data.registrationData)) {\r\n                setData(prevState => {\r\n                    return { ...prevState, registrationData: res }\r\n                })\r\n            }\r\n        })\r\n\r\n        await fetchData(\"/api/get/settings\", user.sub).then((res) => {\r\n            if (JSON.stringify(res[res.length - 1]) !== JSON.stringify(data.settings)) {\r\n                setData(prevState => {\r\n                    return { ...prevState, settings: res[res.length - 1] }\r\n                })\r\n            }\r\n        })\r\n\r\n        await fetchData('/api/get/awardType', user.sub).then((res) => {\r\n            if (JSON.stringify(res) !== JSON.stringify(data.awardTypes)) {\r\n                setData(prevState => {\r\n                    return { ...prevState, awardTypes: res }\r\n                })\r\n            }\r\n        })\r\n\r\n        await fetchData(\"/api/get/individualAward\", user.sub, 'position').then((res) => {\r\n            if (JSON.stringify(res) !== JSON.stringify(data.awards)) {\r\n                setData(prevState => {\r\n                    return { ...prevState, awards: res }\r\n                })\r\n            }\r\n        })\r\n    }\r\n\r\n    if (isAuthenticated) {\r\n        getData().then(() => {\r\n            if (isLoading) {\r\n                setIsLoading(false)\r\n            }\r\n        })\r\n    }\r\n\r\n    return !isLoading ? (\r\n        <>\r\n            <CRow>\r\n                <CCol>\r\n                    <CCard>\r\n                        <CCardHeader>\r\n                            Committee Awards\r\n                        </CCardHeader>\r\n                        <CCardBody>\r\n                            <CRow className=\"align-items-left\">\r\n                                <CCol lg=\"3\">\r\n                                    <CButton block color=\"primary\" onClick={() => openModal()}>Custom Committee Award</CButton>\r\n                                </CCol>\r\n                            </CRow>\r\n                            <br></br>\r\n                            <CDataTable\r\n                                items={data.committeeData}\r\n                                fields={fields}\r\n                                hover\r\n                                striped\r\n                                sorter\r\n                                itemsPerPage={50}\r\n                                pagination\r\n                                scopedSlots={{\r\n                                    'download':\r\n                                        (item) => (\r\n                                            <td>\r\n                                                <CButton block color=\"primary\" onClick={() => committeeAwardsPDFLayout1(item, data.settings, data.awards)}>Download</CButton>\r\n                                            </td>\r\n                                        )\r\n                                }}\r\n                            />\r\n                        </CCardBody>\r\n                    </CCard>\r\n                </CCol>\r\n            </CRow>\r\n\r\n            <CModal show={modalAdd} onClose={setModalAdd} size=\"lg\">\r\n                <CModalHeader>\r\n                    <CModalTitle>Create Custom Committee Award</CModalTitle>\r\n                </CModalHeader>\r\n                <CModalBody>\r\n                    <CForm action=\"\" method=\"post\" encType=\"multipart/form-data\" className=\"form-horizontal\">\r\n                        <CFormGroup row>\r\n                            <CCol md=\"3\">\r\n                                <CLabel htmlFor=\"award-type\">Award Type</CLabel>\r\n                            </CCol>\r\n                            <CCol xs=\"12\" md=\"8\">\r\n                                <CSelect custom name=\"awardType\" value={awardsState.type} onChange={e => {\r\n                                    const val = e.target.value\r\n                                    setAwardsState(prevState => {\r\n                                        return { ...prevState, type: val }\r\n                                    });\r\n                                }}>\r\n                                    {getAwardTypes(data.awardTypes)}\r\n                                </CSelect>\r\n                            </CCol>\r\n                        </CFormGroup>\r\n                        <CFormGroup row>\r\n                            <CCol md=\"3\">\r\n                                <CLabel htmlFor=\"award-committee\">Committee</CLabel>\r\n                            </CCol>\r\n                            <CCol xs=\"12\" md=\"8\">\r\n                                <CSelect custom name=\"awardCommittee\" value={awardsState.committee} onChange={e => {\r\n                                    const val = e.target.value\r\n                                    setAwardsState(prevState => {\r\n                                        return { ...prevState, committee: val }\r\n                                    });\r\n                                }}>\r\n                                    {getCommittees(data.committeeData)}\r\n                                </CSelect>\r\n                            </CCol>\r\n                        </CFormGroup>\r\n                        <CFormGroup row>\r\n                            <CCol md=\"3\">\r\n                                <CLabel htmlFor=\"award-pos\">Position</CLabel>\r\n                            </CCol>\r\n                            <CCol xs=\"12\" md=\"8\">\r\n                                <CInput name=\"awardPos\" placeholder=\"Position\" value={awardsState.position} onChange={e => {\r\n                                    const val = e.target.value\r\n                                    setAwardsState(prevState => {\r\n                                        return { ...prevState, position: val }\r\n                                    });\r\n                                }} />\r\n                            </CCol>\r\n                        </CFormGroup>\r\n                        <CFormGroup row>\r\n                            <CCol md=\"3\">\r\n                                <CLabel htmlFor=\"award-del\">Delegate Name</CLabel>\r\n                            </CCol>\r\n                            <CCol xs=\"12\" md=\"8\">\r\n                                <CInput name=\"awardDel\" placeholder=\"Delegate Name\" value={awardsState.delegate} onChange={e => {\r\n                                    const val = e.target.value\r\n                                    setAwardsState(prevState => {\r\n                                        return { ...prevState, delegate: val }\r\n                                    });\r\n                                }} />\r\n                            </CCol>\r\n                        </CFormGroup>\r\n                        <CFormGroup row>\r\n                            <CCol md=\"3\">\r\n                                <CLabel htmlFor=\"award-delegation\">Delegation</CLabel>\r\n                            </CCol>\r\n                            <CCol xs=\"12\" md=\"8\">\r\n                                <CSelect custom name=\"awardDelegation\" value={awardsState.delegation} onChange={e => {\r\n                                    const val = e.target.value\r\n                                    setAwardsState(prevState => {\r\n                                        return { ...prevState, delegation: val }\r\n                                    });\r\n                                }}>\r\n                                    {getDelegations(data.registrationData)}\r\n                                </CSelect>\r\n                            </CCol>\r\n                        </CFormGroup>\r\n                    </CForm>\r\n                </CModalBody>\r\n                <CModalFooter>\r\n                    <CButton color=\"secondary\" onClick={() => setModalAdd(false)}>Cancel</CButton>\r\n                    <CButton color=\"primary\" onClick={() => createAwardLayout1()}>Download</CButton>\r\n                </CModalFooter>\r\n            </CModal>\r\n        </>\r\n    ) : (<p>Waiting for Data...</p>)\r\n}\r\n\r\nexport default CommitteeAwards"],"sourceRoot":""}
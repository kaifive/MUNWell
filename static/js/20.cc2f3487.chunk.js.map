{"version":3,"sources":["reusable/checkLicense.js","reusable/StateList.js","views/settings/Settings.js"],"names":["async","checkLicense","user","response","data","i","axios","get","length","push","getValidity","license","includes","maxCommittees","Infinity","maxDelegations","maxIndependents","e","Error","message","item","dateFrom","start","dateTo","end","dateCheck","Date","d1","split","d2","from","parseInt","to","getStateList","_jsx","value","disabled","hidden","children","getBadge","status","fieldsAwards","key","label","fieldsLicense","editItem","header","Settings","useAuth0","isAuthenticated","dispatch","useDispatch","accordion","setAccordion","useState","modalAwards","setModalAwards","modalLicense","setModalLicense","modalPurchase","setModalPurchase","settingsState","setSettingsState","default","name","abbreviation","organization","secgen","street","city","state","zipcode","logo","website","invoiceStreet","invoiceCity","invoiceState","invoiceZipcode","earlydelfee","earlyschoolfee","regdelfee","regschoolfee","latedelfee","lateschoolfee","terms","awardsState","setAwardsState","awardType","awardValue","licenseState","setLicenseState","productKey","setData","awardTypes","licenses","isLoading","setIsLoading","saveSettings","event","preventDefault","sub","then","result","alert","formData","FormData","append","undefined","element","Object","keys","url","method","catch","console","log","fetchData","res","prevState","getData","JSON","stringify","_jsxs","_Fragment","CRow","CCol","CCard","CCardHeader","CCardBody","id","className","CButton","block","color","onClick","CCollapse","show","CForm","action","encType","CFormGroup","row","md","CLabel","htmlFor","xs","CInput","placeholder","onChange","val","target","type","CFormText","min","CSelect","custom","col","CInputFile","files","accept","CCardFooter","lg","CInputGroup","CInputGroupPrepend","CInputGroupText","size","CInputGroupAppend","CTextarea","rows","CDataTable","items","fields","hover","striped","sorter","itemsPerPage","pagination","scopedSlots","CDropdown","CDropdownToggle","CDropdownMenu","CDropdownItem","editAwards","delete","_id","deleteAwards","window","confirm","sidebarShow","deleteLicense","CBadge","CModal","onClose","CModalHeader","CModalTitle","CModalBody","CModalFooter","exists","payload","put","update","addAwards","msg","addLicense","href","rel"],"mappings":"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","file":"static/js/20.cc2f3487.chunk.js","sourcesContent":["import axios from 'axios'\r\n\r\nexport async function checkLicense(user) {\r\n    let response;\r\n    let data = []\r\n\r\n    try {\r\n        response = await axios.get('/api/get/license');\r\n\r\n        let i;\r\n        for (i = 0; i < response.data.length; i++) {\r\n            if (response.data[i].user === user) {\r\n                data.push(response.data[i])\r\n            }\r\n        }\r\n\r\n        for (i = 0; i < data.length; i++) {\r\n            if (getValidity(data[i])) {\r\n                if (data[i].license.includes(\"Platinum\")) {\r\n                    return { maxCommittees: Infinity, maxDelegations: Infinity, maxIndependents: Infinity }\r\n                } else if (data[i].license.includes(\"Gold\")) {\r\n                    return { maxCommittees: 10, maxDelegations: 15, maxIndependents: 50 }\r\n                } else if (data[i].license.includes(\"Silver\")) {\r\n                    return { maxCommittees: 5, maxDelegations: 5, maxIndependents: 30 }\r\n                }\r\n            }\r\n        }\r\n    } catch (e) {\r\n        throw new Error(e.message)\r\n    }\r\n\r\n    return 0\r\n}\r\n\r\nfunction getValidity(item) {\r\n    var dateFrom = item.start;\r\n    var dateTo = item.end;\r\n\r\n    var dateCheck = new Date();\r\n\r\n    var d1 = dateFrom.split(\"/\");\r\n    var d2 = dateTo.split(\"/\");\r\n\r\n    var from = new Date(d1[2], parseInt(d1[1]) - 1, d1[0]);\r\n    var to = new Date(d2[2], parseInt(d2[1]) - 1, d2[0]);\r\n\r\n    if (dateCheck > from && dateCheck < to) {\r\n        return true\r\n    }\r\n\r\n    return false\r\n}","export function getStateList() {\r\n    return [\r\n        <option value=\"\" disabled hidden key=\"\">State</option>,\r\n        <option value=\"AL\" key=\"AL\">Alabama</option>,\r\n        <option value=\"AK\" key=\"AK\">Alaska</option>,\r\n        <option value=\"AZ\" key=\"AZ\">Arizona</option>,\r\n        <option value=\"AR\" key=\"AR\">Arkansas</option>,\r\n        <option value=\"CA\" key=\"CA\">California</option>,\r\n        <option value=\"CO\" key=\"CO\">Colorado</option>,\r\n        <option value=\"CT\" key=\"CT\">Connecticut</option>,\r\n        <option value=\"DE\" key=\"DE\">Delaware</option>,\r\n        <option value=\"DC\" key=\"DC\">District Of Columbia</option>,\r\n        <option value=\"FL\" key=\"FL\">Florida</option>,\r\n        <option value=\"GA\" key=\"GA\">Georgia</option>,\r\n        <option value=\"HI\" key=\"HI\">Hawaii</option>,\r\n        <option value=\"ID\" key=\"ID\">Idaho</option>,\r\n        <option value=\"IL\" key=\"IL\">Illinois</option>,\r\n        <option value=\"IN\" key=\"IN\">Indiana</option>,\r\n        <option value=\"IA\" key=\"IA\">Iowa</option>,\r\n        <option value=\"KS\" key=\"KS\">Kansas</option>,\r\n        <option value=\"KY\" key=\"KY\">Kentucky</option>,\r\n        <option value=\"LA\" key=\"LA\">Louisiana</option>,\r\n        <option value=\"ME\" key=\"ME\">Maine</option>,\r\n        <option value=\"MD\" key=\"MD\">Maryland</option>,\r\n        <option value=\"MA\" key=\"MA\">Massachusetts</option>,\r\n        <option value=\"MI\" key=\"MI\">Michigan</option>,\r\n        <option value=\"MN\" key=\"MN\">Minnesota</option>,\r\n        <option value=\"MS\" key=\"MS\">Mississippi</option>,\r\n        <option value=\"MO\" key=\"MO\">Missouri</option>,\r\n        <option value=\"MT\" key=\"MT\">Montana</option>,\r\n        <option value=\"NE\" key=\"NE\">Nebraska</option>,\r\n        <option value=\"NV\" key=\"NV\">Nevada</option>,\r\n        <option value=\"NH\" key=\"NH\">New Hampshire</option>,\r\n        <option value=\"NJ\" key=\"NJ\">New Jersey</option>,\r\n        <option value=\"NM\" key=\"NM\">New Mexico</option>,\r\n        <option value=\"NY\" key=\"NY\">New York</option>,\r\n        <option value=\"NC\" key=\"NC\">North Carolina</option>,\r\n        <option value=\"ND\" key=\"ND\">North Dakota</option>,\r\n        <option value=\"OH\" key=\"OH\">Ohio</option>,\r\n        <option value=\"OK\" key=\"OK\">Oklahoma</option>,\r\n        <option value=\"OR\" key=\"OR\">Oregon</option>,\r\n        <option value=\"PA\" key=\"PA\">Pennsylvania</option>,\r\n        <option value=\"RI\" key=\"RI\">Rhode Island</option>,\r\n        <option value=\"SC\" key=\"SC\">South Carolina</option>,\r\n        <option value=\"SD\" key=\"SD\">South Dakota</option>,\r\n        <option value=\"TN\" key=\"TN\">Tennessee</option>,\r\n        <option value=\"TX\" key=\"TX\">Texas</option>,\r\n        <option value=\"UT\" key=\"UT\">Utah</option>,\r\n        <option value=\"VT\" key=\"VT\">Vermont</option>,\r\n        <option value=\"VA\" key=\"VA\">Virginia</option>,\r\n        <option value=\"WA\" key=\"WA\">Washington</option>,\r\n        <option value=\"WV\" key=\"WV\">West Virginia</option>,\r\n        <option value=\"WI\" key=\"WI\">Wisconsin</option>,\r\n        <option value=\"WY\" key=\"WY\">Wyoming</option>\r\n    ]\r\n}","import React, { useState } from 'react'\r\nimport { useAuth0 } from \"@auth0/auth0-react\";\r\nimport axios from 'axios'\r\nimport { useDispatch } from 'react-redux'\r\nimport {\r\n    CBadge,\r\n    CButton,\r\n    CCard,\r\n    CCardBody,\r\n    CCardFooter,\r\n    CCardHeader,\r\n    CCol,\r\n    CCollapse,\r\n    CDataTable,\r\n    CDropdown,\r\n    CDropdownItem,\r\n    CDropdownMenu,\r\n    CDropdownToggle,\r\n    CForm,\r\n    CFormGroup,\r\n    CFormText,\r\n    CInput,\r\n    CInputFile,\r\n    CInputGroup,\r\n    CInputGroupAppend,\r\n    CInputGroupPrepend,\r\n    CInputGroupText,\r\n    CModal,\r\n    CModalBody,\r\n    CModalFooter,\r\n    CModalHeader,\r\n    CModalTitle,\r\n    CLabel,\r\n    CRow,\r\n    CSelect,\r\n    CTextarea,\r\n} from '@coreui/react';\r\n\r\nimport fetchData from '../../data/LiveData/FetchData'\r\n\r\nimport { getStateList } from 'src/reusable/StateList';\r\nimport { checkLicense } from 'src/reusable/checkLicense';\r\n\r\nconst getBadge = status => {\r\n    switch (status) {\r\n        case 'Valid': return 'success'\r\n        case 'Invalid': return 'danger'\r\n        default: return 'primary'\r\n    }\r\n}\r\n\r\nconst fieldsAwards = [\r\n    {\r\n        key: 'type',\r\n        label: 'Award Type',\r\n    },\r\n    {\r\n        key: 'value',\r\n        label: 'Point Value',\r\n    },\r\n    'actions'\r\n]\r\n\r\nconst fieldsLicense = [\r\n    'validity',\r\n    {\r\n        key: 'start',\r\n        label: 'Start Date',\r\n    },\r\n    {\r\n        key: 'end',\r\n        label: 'End Date',\r\n    },\r\n    'license',\r\n    'actions'\r\n]\r\n\r\nlet header = \"\"\r\nlet status = true;\r\nlet editItem;\r\n\r\nconst Settings = () => {\r\n    const { user } = useAuth0()\r\n    const { isAuthenticated } = useAuth0()\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const [accordion, setAccordion] = useState()\r\n\r\n    const [modalAwards, setModalAwards] = useState(false)\r\n    const [modalLicense, setModalLicense] = useState(false)\r\n    const [modalPurchase, setModalPurchase] = useState(false)\r\n\r\n    const [settingsState, setSettingsState] = useState({\r\n        default: true,\r\n        name: '',\r\n        abbreviation: '',\r\n        organization: '',\r\n        secgen: '',\r\n        start: '',\r\n        end: '',\r\n        street: '',\r\n        city: '',\r\n        state: '',\r\n        zipcode: '',\r\n        logo: '',\r\n        website: '',\r\n\r\n        invoiceStreet: '',\r\n        invoiceCity: '',\r\n        invoiceState: '',\r\n        invoiceZipcode: '',\r\n        earlydelfee: '',\r\n        earlyschoolfee: '',\r\n        regdelfee: '',\r\n        regschoolfee: '',\r\n        latedelfee: '',\r\n        lateschoolfee: '',\r\n        terms: ''\r\n    })\r\n\r\n    const onFileChange = (event) => {\r\n        const val = event.target.files[0]\r\n        setSettingsState(prevState => {\r\n            return { ...prevState, logo: val }\r\n        })\r\n    };\r\n\r\n    const [awardsState, setAwardsState] = useState({\r\n        awardType: '',\r\n        awardValue: ''\r\n    })\r\n\r\n    const [licenseState, setLicenseState] = useState({\r\n        productKey: '',\r\n    })\r\n\r\n    const [data, setData] = useState({\r\n        awardTypes: [],\r\n        licenses: []\r\n    });\r\n\r\n    const [isLoading, setIsLoading] = useState(true)\r\n\r\n    function openAwardsModal() {\r\n        setAwardsState({\r\n            awardType: '',\r\n            awardValue: ''\r\n        })\r\n\r\n        header = \"Add Award Type\"\r\n        status = true\r\n\r\n        setModalAwards(!modalAwards)\r\n    }\r\n\r\n    function openLicenseModal() {\r\n        setLicenseState({\r\n            productKey: ''\r\n        })\r\n\r\n        setModalLicense(!modalLicense)\r\n    }\r\n\r\n    function addAwards(event) {\r\n        event.preventDefault();\r\n\r\n        checkLicense(user.sub)\r\n            .then(result => {\r\n                if (result === 0) {\r\n                    alert(\"No valid MUNWell License found! \\nUpload a valid MUNWell License to be able to configure data.\")\r\n                } else {\r\n                    let exists = false;\r\n\r\n                    let i;\r\n                    for (i = 0; i < data.awardTypes.length; i++) {\r\n                        if (data.awardTypes[i].type === awardsState.awardType) {\r\n                            exists = true;\r\n                            if (editItem !== undefined && data.awardTypes[i].type === editItem.type) {\r\n                                exists = false\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    if (!exists) {\r\n                        if (status) {\r\n                            const payload = {\r\n                                user: user.sub,\r\n                                type: awardsState.awardType,\r\n                                value: awardsState.awardValue\r\n                            }\r\n\r\n                            axios({\r\n                                url: '/api/save/awardType',\r\n                                method: 'POST',\r\n                                data: payload\r\n                            })\r\n                                .then(() => {\r\n                                    alert(\"Award Type: \" + awardsState.awardType + \" added successfully!\")\r\n                                })\r\n                                .catch(() => {\r\n                                    console.log('Internal server error')\r\n                                })\r\n                        } else {\r\n                            axios.put('/api/update/awardType', {\r\n                                data: {\r\n                                    id: editItem._id,\r\n                                    update: { type: awardsState.awardType, value: awardsState.awardValue }\r\n                                },\r\n                            })\r\n                                .then(() => {\r\n                                    fetchData(\"/api/get/individualAward\", user.sub, 'position').then((res) => {\r\n                                        let i;\r\n\r\n                                        for (i = 0; i < res.length; i++) {\r\n                                            if (res[i].type === editItem.type) {\r\n                                                axios.put('/api/update/individualAward', {\r\n                                                    data: {\r\n                                                        id: res[i]._id,\r\n                                                        update: { type: awardsState.awardType }\r\n                                                    }\r\n                                                })\r\n                                            }\r\n                                        }\r\n                                    }).then(() => {\r\n                                        alert(\"Award Type: \" + awardsState.awardType + \" updated successfully!\")\r\n                                    })\r\n                                })\r\n                                .catch(() => {\r\n                                    console.log('Internal server error')\r\n                                })\r\n                        }\r\n                    } else {\r\n                        alert(\"Award type already exists\")\r\n                        setModalAwards(true)\r\n                    }\r\n                }\r\n            })\r\n\r\n        fetchData(\"/api/get/awardType\", user.sub, 'value').then((res) => {\r\n            setData(prevState => {\r\n                return { ...prevState, awardTypes: res }\r\n            })\r\n        })\r\n\r\n        setModalAwards(false)\r\n    }\r\n\r\n    function editAwards(item) {\r\n        setAwardsState({\r\n            awardType: item.type,\r\n            awardValue: item.value\r\n        })\r\n\r\n        header = \"Edit Award Type\"\r\n        status = false\r\n        editItem = item\r\n\r\n        setModalAwards(!modalAwards)\r\n    }\r\n\r\n    function deleteAwards(item) {\r\n        checkLicense(user.sub)\r\n            .then(result => {\r\n                if (result === 0) {\r\n                    alert(\"No valid MUNWell License found! \\nUpload a valid MUNWell License to be able to configure data.\")\r\n                } else {\r\n                    axios.delete('/api/delete/awardType', {\r\n                        data: {\r\n                            id: item._id,\r\n                        },\r\n                    })\r\n                        .then(() => {\r\n                            alert(\"Award Type: \" + item.type + \" deleted successfully!\")\r\n                        })\r\n                        .catch(() => {\r\n                            console.log('Internal server error')\r\n                        })\r\n                }\r\n            })\r\n\r\n        fetchData(\"/api/get/awardType\", user.sub, 'value').then((res) => {\r\n            setData(prevState => {\r\n                return { ...prevState, awardTypes: res }\r\n            })\r\n        })\r\n    }\r\n\r\n    function addLicense(event) {\r\n        event.preventDefault();\r\n\r\n        fetchData(\"/api/get/validlicense\", user.sub, 'start').then((res) => {\r\n            let msg = \"Invalid MUNWell License Key\";\r\n\r\n            let i;\r\n            for (i = 0; i < res.length; i++) {\r\n                if (res[i].key === licenseState.productKey) {\r\n                    msg = \"\";\r\n\r\n                    const payload = {\r\n                        user: user.sub,\r\n                        key: licenseState.productKey,\r\n                        license: res[i].license,\r\n                        start: res[i].start,\r\n                        end: res[i].end\r\n                    }\r\n\r\n                    axios({\r\n                        url: '/api/save/license',\r\n                        method: 'POST',\r\n                        data: payload\r\n                    })\r\n                        .then(() => {\r\n                            alert(\"MUNWell License added successfully!\")\r\n                            fetchData(\"/api/get/license\", user.sub, 'start').then((res) => {\r\n                                setData(prevState => {\r\n                                    return { ...prevState, licenses: res }\r\n                                })\r\n                            })\r\n                        })\r\n                        .catch(() => {\r\n                            console.log('Internal server error')\r\n                        })\r\n                }\r\n            }\r\n\r\n            if (msg.length > 0) {\r\n                alert(msg)\r\n            }\r\n        })\r\n\r\n        setModalLicense(false)\r\n    }\r\n\r\n    function deleteLicense(item) {\r\n        axios.delete('/api/delete/license', {\r\n            data: {\r\n                id: item._id,\r\n            },\r\n        })\r\n            .then(() => {\r\n                alert(\"MUNWell License deleted successfully!\")\r\n            })\r\n            .catch(() => {\r\n                console.log('Internal server error')\r\n            })\r\n\r\n        fetchData(\"/api/get/license\", user.sub, 'start').then((res) => {\r\n            setData(prevState => {\r\n                return { ...prevState, licenses: res }\r\n            })\r\n        })\r\n    }\r\n\r\n    function getValidity(item) {\r\n        var dateFrom = item.start;\r\n        var dateTo = item.end;\r\n\r\n        var dateCheck = new Date();\r\n\r\n        var d1 = dateFrom.split(\"/\");\r\n        var d2 = dateTo.split(\"/\");\r\n\r\n        var from = new Date(d1[2], parseInt(d1[1]) - 1, d1[0]);\r\n        var to = new Date(d2[2], parseInt(d2[1]) - 1, d2[0]);\r\n\r\n        if (dateCheck > from && dateCheck < to) {\r\n            return \"Valid\"\r\n        }\r\n        return \"Invalid\"\r\n    }\r\n\r\n    async function saveSettings(event) {\r\n        event.preventDefault();\r\n        checkLicense(user.sub)\r\n            .then(result => {\r\n                if (result === 0) {\r\n                    alert(\"No valid MUNWell License found! \\nUpload a valid MUNWell License to be able to configure data.\")\r\n                } else {\r\n                    const formData = new FormData();\r\n\r\n                    formData.append(\"file\", settingsState.logo);\r\n\r\n                    if (settingsState.user === undefined) {\r\n                        formData.append(\"user\", user.sub);\r\n                    }\r\n\r\n                    for (let element of Object.keys(settingsState)) {\r\n                        if (element !== \"logo\" && element !== \"_id\")\r\n                            formData.append([element], settingsState[element]);\r\n                    }\r\n\r\n                    axios({\r\n                        url: '/api/save/settings',\r\n                        method: 'POST',\r\n                        data: formData\r\n                    })\r\n                        .then(() => {\r\n                            alert(\"MUNWell Settings saved successfully!\")\r\n                        })\r\n                        .catch(() => {\r\n                            console.log('Internal server error')\r\n                        })\r\n                }\r\n            })\r\n\r\n        fetchData(\"/api/get/settings\", user.sub).then((res) => {\r\n            if (res[res.length - 1] !== undefined) {\r\n                setSettingsState(res[res.length - 1])\r\n            }\r\n            setSettingsState(prevState => {\r\n                return { ...prevState, default: true }\r\n            })\r\n        })\r\n    }\r\n\r\n    function resetAccount() {\r\n        let alert = window.confirm(\"This action is irreversable, are you sure you want to delete all MUNWell data?\")\r\n\r\n        if (alert) {\r\n            fetchData(\"/api/get/allotments\", user.sub).then((res) => {\r\n                let i;\r\n                for (i = 0; i < res.length; i++) {\r\n                    axios.delete('/api/delete/allotments', {\r\n                        data: {\r\n                            id: res[i]._id,\r\n                        },\r\n                    })\r\n                }\r\n            })\r\n\r\n            fetchData(\"/api/get/awardType\", user.sub).then((res) => {\r\n                let i;\r\n                for (i = 0; i < res.length; i++) {\r\n                    axios.delete('/api/delete/awardType', {\r\n                        data: {\r\n                            id: res[i]._id,\r\n                        },\r\n                    })\r\n                }\r\n            })\r\n\r\n            fetchData(\"/api/get/committee\", user.sub).then((res) => {\r\n                let i;\r\n                for (i = 0; i < res.length; i++) {\r\n                    axios.delete('/api/delete/committee', {\r\n                        data: {\r\n                            id: res[i]._id,\r\n                        },\r\n                    })\r\n                }\r\n            })\r\n\r\n            fetchData(\"/api/get/individualAward\", user.sub).then((res) => {\r\n                let i;\r\n                for (i = 0; i < res.length; i++) {\r\n                    axios.delete('/api/delete/individualAward', {\r\n                        data: {\r\n                            id: res[i]._id,\r\n                        },\r\n                    })\r\n                }\r\n            })\r\n\r\n            fetchData(\"/api/get/registrationData\", user.sub).then((res) => {\r\n                let i;\r\n                for (i = 0; i < res.length; i++) {\r\n                    axios.delete('/api/delete/registrationData', {\r\n                        data: {\r\n                            id: res[i]._id,\r\n                        },\r\n                    })\r\n                }\r\n            })\r\n\r\n            fetchData(\"/api/get/settings\", user.sub).then((res) => {\r\n                let i;\r\n                for (i = 0; i < res.length; i++) {\r\n                    axios.delete('/api/delete/settings', {\r\n                        data: {\r\n                            id: res[i]._id,\r\n                        },\r\n                    })\r\n                }\r\n            })\r\n\r\n            fetchData(\"/api/get/license\", user.sub).then((res) => {\r\n                let i;\r\n                for (i = 0; i < res.length; i++) {\r\n                    axios.delete('/api/delete/license', {\r\n                        data: {\r\n                            id: res[i]._id,\r\n                        },\r\n                    })\r\n                }\r\n            })\r\n\r\n            getData().then(() => {\r\n                dispatch({ type: 'set', sidebarShow: false })\r\n                dispatch({ type: 'set', sidebarShow: true })\r\n\r\n                setSettingsState({\r\n                    default: true,\r\n                    name: '',\r\n                    abbreviation: '',\r\n                    organization: '',\r\n                    secgen: '',\r\n                    start: '',\r\n                    end: '',\r\n                    street: '',\r\n                    city: '',\r\n                    state: '',\r\n                    zipcode: '',\r\n                    logo: '',\r\n                    website: '',\r\n\r\n                    invoiceStreet: '',\r\n                    invoiceCity: '',\r\n                    invoiceState: '',\r\n                    invoiceZipcode: '',\r\n                    earlydelfee: '',\r\n                    earlyschoolfee: '',\r\n                    regdelfee: '',\r\n                    regschoolfee: '',\r\n                    latedelfee: '',\r\n                    lateschoolfee: '',\r\n                    terms: ''\r\n                })\r\n\r\n                window.alert(\"MUNWell account reset successfully!\")\r\n            })\r\n        }\r\n    }\r\n\r\n    async function getData() {\r\n        await fetchData(\"/api/get/awardType\", user.sub, 'value').then((res) => {\r\n            if (JSON.stringify(res) !== JSON.stringify(data.awardTypes)) {\r\n                setData(prevState => {\r\n                    return { ...prevState, awardTypes: res }\r\n                })\r\n            }\r\n        })\r\n\r\n        await fetchData(\"/api/get/license\", user.sub, 'start').then((res) => {\r\n            if (JSON.stringify(res) !== JSON.stringify(data.licenses)) {\r\n                setData(prevState => {\r\n                    return { ...prevState, licenses: res }\r\n                })\r\n            }\r\n        })\r\n\r\n        if (settingsState.default) {\r\n            await fetchData(\"/api/get/settings\", user.sub).then((res) => {\r\n                if (res.length !== 0) {\r\n                    if (JSON.stringify(res[res.length - 1]) !== JSON.stringify(settingsState)) {\r\n                        setSettingsState(res[res.length - 1])\r\n                        setSettingsState(prevState => {\r\n                            return { ...prevState, default: false }\r\n                        })\r\n                    }\r\n                }\r\n            })\r\n        }\r\n    }\r\n\r\n    if (isAuthenticated) {\r\n        getData().then(() => {\r\n            if (isLoading) {\r\n                setIsLoading(false)\r\n            }\r\n        })\r\n    }\r\n\r\n    return !isLoading ? (\r\n        <>\r\n            <CRow>\r\n                <CCol>\r\n                    <CCard>\r\n                        <CCardHeader>\r\n                            MUNWell Settings\r\n                        </CCardHeader>\r\n                        <CCardBody>\r\n                            <div id=\"accordion\">\r\n                                <CCard className=\"mb-0\">\r\n                                    <CCardHeader id=\"headingOne\">\r\n                                        <CButton\r\n                                            block\r\n                                            color=\"link\"\r\n                                            className=\"text-left m-0 p-0\"\r\n                                            onClick={() => setAccordion(accordion === 0 ? null : 0)}\r\n                                        >\r\n                                            <h5 className=\"m-0 p-0\"><strong>Conference Settings</strong></h5>\r\n                                        </CButton>\r\n                                    </CCardHeader>\r\n                                    <CCollapse show={accordion === 0}>\r\n                                        <CCardBody>\r\n                                            <CForm action=\"\" method=\"post\" encType=\"multipart/form-data\" className=\"form-horizontal\">\r\n                                                <CFormGroup row>\r\n                                                    <CCol md=\"2\">\r\n                                                        <CLabel htmlFor=\"conf-name\">Conference Name</CLabel>\r\n                                                    </CCol>\r\n                                                    <CCol xs=\"12\" md=\"9\">\r\n                                                        <CInput name=\"confName\" placeholder=\"Conference Name\" value={settingsState.name} onChange={e => {\r\n                                                            const val = e.target.value\r\n                                                            setSettingsState(prevState => {\r\n                                                                return { ...prevState, name: val }\r\n                                                            })\r\n                                                        }} />\r\n                                                    </CCol>\r\n                                                </CFormGroup>\r\n                                                <CFormGroup row>\r\n                                                    <CCol md=\"2\">\r\n                                                        <CLabel htmlFor=\"conf-abbr\">Conference Abbreviation</CLabel>\r\n                                                    </CCol>\r\n                                                    <CCol xs=\"12\" md=\"9\">\r\n                                                        <CInput name=\"confAbbr\" placeholder=\"Conference Abbreviation\" value={settingsState.abbreviation} onChange={e => {\r\n                                                            const val = e.target.value\r\n                                                            setSettingsState(prevState => {\r\n                                                                return { ...prevState, abbreviation: val }\r\n                                                            })\r\n                                                        }} />\r\n                                                    </CCol>\r\n                                                </CFormGroup>\r\n                                                <CFormGroup row>\r\n                                                    <CCol md=\"2\">\r\n                                                        <CLabel htmlFor=\"conf-org\">Conference Organization</CLabel>\r\n                                                    </CCol>\r\n                                                    <CCol xs=\"12\" md=\"9\">\r\n                                                        <CInput name=\"confOrg\" placeholder=\"Conference Organization\" value={settingsState.organization} onChange={e => {\r\n                                                            const val = e.target.value\r\n                                                            setSettingsState(prevState => {\r\n                                                                return { ...prevState, organization: val }\r\n                                                            })\r\n                                                        }} />\r\n                                                    </CCol>\r\n                                                </CFormGroup>\r\n                                                <CFormGroup row>\r\n                                                    <CCol md=\"2\">\r\n                                                        <CLabel htmlFor=\"conf-org\">Conference Secretary-General Name</CLabel>\r\n                                                    </CCol>\r\n                                                    <CCol xs=\"12\" md=\"9\">\r\n                                                        <CInput name=\"confSecGen\" placeholder=\"Conference Secretary-General Name\" value={settingsState.secgen} onChange={e => {\r\n                                                            const val = e.target.value\r\n                                                            setSettingsState(prevState => {\r\n                                                                return { ...prevState, secgen: val }\r\n                                                            })\r\n                                                        }} />\r\n                                                    </CCol>\r\n                                                </CFormGroup>\r\n                                                <CFormGroup row>\r\n                                                    <CCol md=\"2\">\r\n                                                        <CLabel htmlFor=\"conf-date\">Conference Date</CLabel>\r\n                                                    </CCol>\r\n                                                    <CCol xs=\"12\" md=\"4\">\r\n                                                        <CInput type=\"date\" name=\"confStart\" value={settingsState.start} onChange={e => {\r\n                                                            const val = e.target.value\r\n                                                            setSettingsState(prevState => {\r\n                                                                return { ...prevState, start: val }\r\n                                                            })\r\n                                                        }} />\r\n                                                        <CFormText className=\"help-block\">Start Date</CFormText>\r\n                                                    </CCol>\r\n                                                    <CCol xs=\"12\" md=\"4\">\r\n                                                        <CInput type=\"date\" name=\"confEnd\" value={settingsState.end} min={settingsState.start} onChange={e => {\r\n                                                            const val = e.target.value\r\n                                                            setSettingsState(prevState => {\r\n                                                                return { ...prevState, end: val }\r\n                                                            })\r\n                                                        }} />\r\n                                                        <CFormText className=\"help-block\">End Date</CFormText>\r\n                                                    </CCol>\r\n                                                </CFormGroup>\r\n                                                <CFormGroup row>\r\n                                                    <CCol md=\"2\">\r\n                                                        <CLabel htmlFor=\"conf-addr\">Conference Address</CLabel>\r\n                                                    </CCol>\r\n                                                    <CCol xs=\"12\" md=\"9\">\r\n                                                        <CInput name=\"confStreet\" placeholder=\"Street\" value={settingsState.street} onChange={e => {\r\n                                                            const val = e.target.value\r\n                                                            setSettingsState(prevState => {\r\n                                                                return { ...prevState, street: val }\r\n                                                            })\r\n                                                        }} />\r\n                                                    </CCol>\r\n                                                </CFormGroup>\r\n                                                <CFormGroup row>\r\n                                                    <CCol md=\"2\"></CCol>\r\n                                                    <CCol xs=\"12\" md=\"3\">\r\n                                                        <CInput name=\"confCity\" placeholder=\"City\" value={settingsState.city} onChange={e => {\r\n                                                            const val = e.target.value\r\n                                                            setSettingsState(prevState => {\r\n                                                                return { ...prevState, city: val }\r\n                                                            })\r\n                                                        }} />\r\n                                                    </CCol>\r\n                                                    <CCol xs=\"12\" md=\"3\">\r\n                                                        <CSelect custom name=\"confState\" value={settingsState.state} onChange={e => {\r\n                                                            const val = e.target.value\r\n                                                            setSettingsState(prevState => {\r\n                                                                return { ...prevState, state: val }\r\n                                                            })\r\n                                                        }} >\r\n                                                            {getStateList()}\r\n                                                        </CSelect>\r\n                                                    </CCol>\r\n                                                    <CCol xs=\"12\" md=\"3\">\r\n                                                        <CInput name=\"confPostal\" placeholder=\"Postal Code\" value={settingsState.zipcode} onChange={e => {\r\n                                                            const val = e.target.value\r\n                                                            setSettingsState(prevState => {\r\n                                                                return { ...prevState, zipcode: val }\r\n                                                            })\r\n                                                        }} />\r\n                                                    </CCol>\r\n                                                </CFormGroup>\r\n                                                <CFormGroup row>\r\n                                                    <CLabel col md=\"2\" htmlFor=\"conf-logo\">Conference Logo</CLabel>\r\n                                                    <CCol xs=\"12\" md=\"9\">\r\n                                                        <CInputFile name=\"confLogo\"\r\n                                                            onChange={onFileChange}\r\n                                                            accept=\"image/*\"\r\n                                                        />\r\n                                                        <CFormText className=\"help-block\">Recommended Image With 1:1 Aspect Ratio</CFormText>\r\n                                                    </CCol>\r\n                                                </CFormGroup>\r\n                                                <CFormGroup row>\r\n                                                    <CCol md=\"2\">\r\n                                                        <CLabel htmlFor=\"conf-web\">Conference Website</CLabel>\r\n                                                    </CCol>\r\n                                                    <CCol xs=\"12\" md=\"9\">\r\n                                                        <CInput name=\"conf-web\" placeholder=\"Conference Website\" value={settingsState.website} onChange={e => {\r\n                                                            const val = e.target.value\r\n                                                            setSettingsState(prevState => {\r\n                                                                return { ...prevState, website: val }\r\n                                                            })\r\n                                                        }} />\r\n                                                    </CCol>\r\n                                                </CFormGroup>\r\n                                            </CForm>\r\n                                        </CCardBody>\r\n                                        <CCardFooter>\r\n                                            <CRow className=\"align-items-right\">\r\n                                                <CCol lg=\"2\">\r\n                                                    <CButton block color=\"primary\" onClick={event => saveSettings(event)}>Save Changes</CButton>\r\n                                                </CCol>\r\n                                            </CRow>\r\n                                        </CCardFooter>\r\n                                    </CCollapse>\r\n                                </CCard>\r\n                                <CCard className=\"mb-0\">\r\n                                    <CCardHeader id=\"headingTwo\">\r\n                                        <CButton\r\n                                            block\r\n                                            color=\"link\"\r\n                                            className=\"text-left m-0 p-0\"\r\n                                            onClick={() => setAccordion(accordion === 1 ? null : 1)}\r\n                                        >\r\n                                            <h5 className=\"m-0 p-0\"><strong>Registration Settings</strong></h5>\r\n                                        </CButton>\r\n                                    </CCardHeader>\r\n                                    <CCollapse show={accordion === 1}>\r\n                                        <CCardBody>\r\n                                            <CForm action=\"\" method=\"post\" encType=\"multipart/form-data\" className=\"form-horizontal\">\r\n                                                <CFormGroup row>\r\n                                                    <CCol md=\"2\">\r\n                                                        <CLabel htmlFor=\"conf-addr\">Invoice Address</CLabel>\r\n                                                    </CCol>\r\n                                                    <CCol xs=\"12\" md=\"9\">\r\n                                                        <CInput name=\"confStreet\" placeholder=\"Street\" value={settingsState.invoiceStreet} onChange={e => {\r\n                                                            const val = e.target.value\r\n                                                            setSettingsState(prevState => {\r\n                                                                return { ...prevState, invoiceStreet: val }\r\n                                                            })\r\n                                                        }} />\r\n                                                    </CCol>\r\n                                                </CFormGroup>\r\n                                                <CFormGroup row>\r\n                                                    <CCol md=\"2\"></CCol>\r\n                                                    <CCol xs=\"12\" md=\"3\">\r\n                                                        <CInput name=\"confCity\" placeholder=\"City\" value={settingsState.invoiceCity} onChange={e => {\r\n                                                            const val = e.target.value\r\n                                                            setSettingsState(prevState => {\r\n                                                                return { ...prevState, invoiceCity: val }\r\n                                                            })\r\n                                                        }} />\r\n                                                    </CCol>\r\n                                                    <CCol xs=\"12\" md=\"3\">\r\n                                                        <CSelect custom name=\"confState\" value={settingsState.invoiceState} onChange={e => {\r\n                                                            const val = e.target.value\r\n                                                            setSettingsState(prevState => {\r\n                                                                return { ...prevState, invoiceState: val }\r\n                                                            })\r\n                                                        }}>\r\n                                                            {getStateList()}\r\n                                                        </CSelect>\r\n                                                    </CCol>\r\n                                                    <CCol xs=\"12\" md=\"3\">\r\n                                                        <CInput name=\"confPostal\" placeholder=\"Postal Code\" value={settingsState.invoiceZipcode} onChange={e => {\r\n                                                            const val = e.target.value\r\n                                                            setSettingsState(prevState => {\r\n                                                                return { ...prevState, invoiceZipcode: val }\r\n                                                            })\r\n                                                        }} />\r\n                                                    </CCol>\r\n                                                </CFormGroup>\r\n                                                <CFormGroup row>\r\n                                                    <CCol md=\"2\">\r\n                                                        <CLabel htmlFor=\"conf-web\">Early Registration Fees</CLabel>\r\n                                                    </CCol>\r\n                                                    <CCol xs=\"12\" md=\"4\">\r\n                                                        <div className=\"controls\">\r\n                                                            <CInputGroup className=\"input-prepend\">\r\n                                                                <CInputGroupPrepend>\r\n                                                                    <CInputGroupText>$</CInputGroupText>\r\n                                                                </CInputGroupPrepend>\r\n                                                                <CInput id=\"appendedPrependedInput\" size=\"16\" type=\"number\" min=\"0\" value={settingsState.earlydelfee} onChange={e => {\r\n                                                                    const val = e.target.value\r\n                                                                    setSettingsState(prevState => {\r\n                                                                        return { ...prevState, earlydelfee: val }\r\n                                                                    })\r\n                                                                }} />\r\n                                                                <CInputGroupAppend>\r\n                                                                    <CInputGroupText>.00</CInputGroupText>\r\n                                                                </CInputGroupAppend>\r\n                                                            </CInputGroup>\r\n                                                            <CFormText>Delegate Fee</CFormText>\r\n                                                        </div>\r\n                                                    </CCol>\r\n                                                    <CCol xs=\"12\" md=\"1\"></CCol>\r\n                                                    <CCol xs=\"12\" md=\"4\">\r\n                                                        <div className=\"controls\">\r\n                                                            <CInputGroup className=\"input-prepend\">\r\n                                                                <CInputGroupPrepend>\r\n                                                                    <CInputGroupText>$</CInputGroupText>\r\n                                                                </CInputGroupPrepend>\r\n                                                                <CInput id=\"appendedPrependedInput\" size=\"16\" type=\"number\" min=\"0\" value={settingsState.earlyschoolfee} onChange={e => {\r\n                                                                    const val = e.target.value\r\n                                                                    setSettingsState(prevState => {\r\n                                                                        return { ...prevState, earlyschoolfee: val }\r\n                                                                    })\r\n                                                                }} />\r\n                                                                <CInputGroupAppend>\r\n                                                                    <CInputGroupText>.00</CInputGroupText>\r\n                                                                </CInputGroupAppend>\r\n                                                            </CInputGroup>\r\n                                                            <CFormText>Delegation Fee</CFormText>\r\n                                                        </div>\r\n                                                    </CCol>\r\n                                                </CFormGroup>\r\n                                                <CFormGroup row>\r\n                                                    <CCol md=\"2\">\r\n                                                        <CLabel htmlFor=\"conf-web\">Regular Registration Fees</CLabel>\r\n                                                    </CCol>\r\n                                                    <CCol xs=\"12\" md=\"4\">\r\n                                                        <div className=\"controls\">\r\n                                                            <CInputGroup className=\"input-prepend\">\r\n                                                                <CInputGroupPrepend>\r\n                                                                    <CInputGroupText>$</CInputGroupText>\r\n                                                                </CInputGroupPrepend>\r\n                                                                <CInput id=\"appendedPrependedInput\" size=\"16\" type=\"number\" min=\"0\" value={settingsState.regdelfee} onChange={e => {\r\n                                                                    const val = e.target.value\r\n                                                                    setSettingsState(prevState => {\r\n                                                                        return { ...prevState, regdelfee: val }\r\n                                                                    })\r\n                                                                }} />\r\n                                                                <CInputGroupAppend>\r\n                                                                    <CInputGroupText>.00</CInputGroupText>\r\n                                                                </CInputGroupAppend>\r\n                                                            </CInputGroup>\r\n                                                            <CFormText>Delegate Fee</CFormText>\r\n                                                        </div>\r\n                                                    </CCol>\r\n                                                    <CCol xs=\"12\" md=\"1\"></CCol>\r\n                                                    <CCol xs=\"12\" md=\"4\">\r\n                                                        <div className=\"controls\">\r\n                                                            <CInputGroup className=\"input-prepend\">\r\n                                                                <CInputGroupPrepend>\r\n                                                                    <CInputGroupText>$</CInputGroupText>\r\n                                                                </CInputGroupPrepend>\r\n                                                                <CInput id=\"appendedPrependedInput\" size=\"16\" type=\"number\" min=\"0\" value={settingsState.regschoolfee} onChange={e => {\r\n                                                                    const val = e.target.value\r\n                                                                    setSettingsState(prevState => {\r\n                                                                        return { ...prevState, regschoolfee: val }\r\n                                                                    })\r\n                                                                }} />\r\n                                                                <CInputGroupAppend>\r\n                                                                    <CInputGroupText>.00</CInputGroupText>\r\n                                                                </CInputGroupAppend>\r\n                                                            </CInputGroup>\r\n                                                            <CFormText>Delegation Fee</CFormText>\r\n                                                        </div>\r\n                                                    </CCol>\r\n                                                </CFormGroup>\r\n                                                <CFormGroup row>\r\n                                                    <CCol md=\"2\">\r\n                                                        <CLabel htmlFor=\"conf-web\">Late Registration Fees</CLabel>\r\n                                                    </CCol>\r\n                                                    <CCol xs=\"12\" md=\"4\">\r\n                                                        <div className=\"controls\">\r\n                                                            <CInputGroup className=\"input-prepend\">\r\n                                                                <CInputGroupPrepend>\r\n                                                                    <CInputGroupText>$</CInputGroupText>\r\n                                                                </CInputGroupPrepend>\r\n                                                                <CInput id=\"appendedPrependedInput\" size=\"16\" type=\"number\" min=\"0\" value={settingsState.latedelfee} onChange={e => {\r\n                                                                    const val = e.target.value\r\n                                                                    setSettingsState(prevState => {\r\n                                                                        return { ...prevState, latedelfee: val }\r\n                                                                    })\r\n                                                                }} />\r\n                                                                <CInputGroupAppend>\r\n                                                                    <CInputGroupText>.00</CInputGroupText>\r\n                                                                </CInputGroupAppend>\r\n                                                            </CInputGroup>\r\n                                                            <CFormText>Delegate Fee</CFormText>\r\n                                                        </div>\r\n                                                    </CCol>\r\n                                                    <CCol xs=\"12\" md=\"1\"></CCol>\r\n                                                    <CCol xs=\"12\" md=\"4\">\r\n                                                        <div className=\"controls\">\r\n                                                            <CInputGroup className=\"input-prepend\">\r\n                                                                <CInputGroupPrepend>\r\n                                                                    <CInputGroupText>$</CInputGroupText>\r\n                                                                </CInputGroupPrepend>\r\n                                                                <CInput id=\"appendedPrependedInput\" size=\"16\" type=\"number\" min=\"0\" value={settingsState.lateschoolfee} onChange={e => {\r\n                                                                    const val = e.target.value\r\n                                                                    setSettingsState(prevState => {\r\n                                                                        return { ...prevState, lateschoolfee: val }\r\n                                                                    })\r\n                                                                }} />\r\n                                                                <CInputGroupAppend>\r\n                                                                    <CInputGroupText>.00</CInputGroupText>\r\n                                                                </CInputGroupAppend>\r\n                                                            </CInputGroup>\r\n                                                            <CFormText>Delegation Fee</CFormText>\r\n                                                        </div>\r\n                                                    </CCol>\r\n                                                </CFormGroup>\r\n                                                <CFormGroup row>\r\n                                                    <CCol md=\"2\">\r\n                                                        <CLabel htmlFor=\"textarea-input\">Terms & Conditions</CLabel>\r\n                                                    </CCol>\r\n                                                    <CCol xs=\"12\" md=\"9\">\r\n                                                        <CTextarea\r\n                                                            name=\"textarea-input\"\r\n                                                            rows=\"9\"\r\n                                                            placeholder=\"Terms & Conditions\"\r\n                                                            value={settingsState.terms}\r\n                                                            onChange={e => {\r\n                                                                const val = e.target.value\r\n                                                                setSettingsState(prevState => {\r\n                                                                    return { ...prevState, terms: val }\r\n                                                                })\r\n                                                            }}\r\n                                                        />\r\n                                                    </CCol>\r\n                                                </CFormGroup>\r\n                                            </CForm>\r\n                                        </CCardBody>\r\n                                        <CCardFooter>\r\n                                            <CRow className=\"align-items-right\">\r\n                                                <CCol lg=\"2\">\r\n                                                    <CButton block color=\"primary\" onClick={event => saveSettings(event)}>Save Changes</CButton>\r\n                                                </CCol>\r\n                                            </CRow>\r\n                                        </CCardFooter>\r\n                                    </CCollapse>\r\n                                </CCard>\r\n                                <CCard className=\"mb-0\">\r\n                                    <CCardHeader id=\"headingThree\">\r\n                                        <CButton\r\n                                            block\r\n                                            color=\"link\"\r\n                                            className=\"text-left m-0 p-0\"\r\n                                            onClick={() => setAccordion(accordion === 2 ? null : 2)}\r\n                                        >\r\n                                            <h5 className=\"m-0 p-0\"><strong>Award Settings</strong></h5>\r\n                                        </CButton>\r\n                                    </CCardHeader>\r\n                                    <CCollapse show={accordion === 2}>\r\n                                        <CCardBody>\r\n                                            <CRow className=\"align-items-left\">\r\n                                                <CCol lg=\"2\">\r\n                                                    <CButton block color=\"primary\" onClick={() => openAwardsModal()}>Add New</CButton>\r\n                                                </CCol>\r\n                                            </CRow>\r\n                                            <br></br>\r\n                                            <CDataTable\r\n                                                items={data?.awardTypes || { message: \"Waiting for Data...\" }}\r\n                                                fields={fieldsAwards}\r\n                                                hover\r\n                                                striped\r\n                                                sorter\r\n                                                itemsPerPage={10}\r\n                                                pagination\r\n                                                scopedSlots={{\r\n                                                    'actions':\r\n                                                        (item) => (\r\n                                                            <td>\r\n                                                                <CDropdown className=\"m-1\">\r\n                                                                    <CDropdownToggle color=\"secondary\">\r\n                                                                        Select Action\r\n                                                                    </CDropdownToggle>\r\n                                                                    <CDropdownMenu>\r\n                                                                        <CDropdownItem onClick={() => editAwards(item)}>Edit</CDropdownItem>\r\n                                                                        <CDropdownItem onClick={() => deleteAwards(item)}>Delete</CDropdownItem>\r\n                                                                    </CDropdownMenu>\r\n                                                                </CDropdown>\r\n                                                            </td>\r\n                                                        ),\r\n                                                }}\r\n                                            />\r\n                                        </CCardBody>\r\n                                    </CCollapse>\r\n                                </CCard>\r\n                                <CCard className=\"mb-0\">\r\n                                    <CCardHeader id=\"headingFour\">\r\n                                        <CButton\r\n                                            block\r\n                                            color=\"link\"\r\n                                            className=\"text-left m-0 p-0\"\r\n                                            onClick={() => setAccordion(accordion === 3 ? null : 3)}\r\n                                        >\r\n                                            <h5 className=\"m-0 p-0\"><strong>MUNWell License</strong></h5>\r\n                                        </CButton>\r\n                                    </CCardHeader>\r\n                                    <CCollapse show={accordion === 3}>\r\n                                        <CCardBody>\r\n                                            <CRow className=\"align-items-left\">\r\n                                                <CCol lg=\"2\">\r\n                                                    <CButton block color=\"primary\" onClick={() => openLicenseModal()}>Upload License</CButton>\r\n                                                </CCol>\r\n                                                <CCol lg=\"2\">\r\n                                                    <CButton block color=\"primary\" onClick={() => setModalPurchase(true)}>Purchase a License</CButton>\r\n                                                </CCol>\r\n                                                <CCol lg=\"2\">\r\n                                                    <CButton block color=\"primary\" onClick={() => resetAccount()}>Reset Account</CButton>\r\n                                                </CCol>\r\n                                            </CRow>\r\n                                            <br></br>\r\n                                            <CDataTable\r\n                                                items={data?.licenses || { message: \"Waiting for Data...\" }}\r\n                                                fields={fieldsLicense}\r\n                                                hover\r\n                                                striped\r\n                                                sorter\r\n                                                itemsPerPage={10}\r\n                                                pagination\r\n                                                scopedSlots={{\r\n                                                    'actions':\r\n                                                        (item) => (\r\n                                                            <td>\r\n                                                                <CDropdown className=\"m-1\">\r\n                                                                    <CDropdownToggle color=\"secondary\">\r\n                                                                        Select Action\r\n                                                                    </CDropdownToggle>\r\n                                                                    <CDropdownMenu>\r\n                                                                        <CDropdownItem onClick={() => deleteLicense(item)}>Delete</CDropdownItem>\r\n                                                                    </CDropdownMenu>\r\n                                                                </CDropdown>\r\n                                                            </td>\r\n                                                        ),\r\n                                                    'validity':\r\n                                                        (item) => (\r\n                                                            <td>\r\n                                                                <CBadge color={getBadge(getValidity(item))}>\r\n                                                                    {getValidity(item)}\r\n                                                                </CBadge>\r\n                                                            </td>\r\n                                                        )\r\n                                                }}\r\n                                            />\r\n                                        </CCardBody>\r\n                                    </CCollapse>\r\n                                </CCard>\r\n                            </div>\r\n                        </CCardBody>\r\n                    </CCard >\r\n                </CCol >\r\n            </CRow >\r\n\r\n\r\n            <CModal show={modalAwards} onClose={setModalAwards} size=\"lg\">\r\n                <CModalHeader>\r\n                    <CModalTitle>{header}</CModalTitle>\r\n                </CModalHeader>\r\n                <CModalBody>\r\n                    <CForm action=\"\" method=\"post\" encType=\"multipart/form-data\" className=\"form-horizontal\">\r\n                        <CFormGroup row>\r\n                            <CCol md=\"3\">\r\n                                <CLabel htmlFor=\"award-type\">Award Type</CLabel>\r\n                            </CCol>\r\n                            <CCol xs=\"12\" md=\"8\">\r\n                                <CInput name=\"awardType\" placeholder=\"Award Type\" value={awardsState.awardType} onChange={e => {\r\n                                    const val = e.target.value\r\n                                    setAwardsState(prevState => {\r\n                                        return { ...prevState, awardType: val }\r\n                                    });\r\n                                }} />\r\n                            </CCol>\r\n                        </CFormGroup>\r\n                        <CFormGroup row>\r\n                            <CCol md=\"3\">\r\n                                <CLabel htmlFor=\"award-value\">Point Value</CLabel>\r\n                            </CCol>\r\n                            <CCol xs=\"12\" md=\"8\">\r\n                                <CInput type=\"number\" min=\"0\" name=\"awardValue\" placeholder=\"Point Value\" value={awardsState.awardValue} onChange={e => {\r\n                                    const val = e.target.value\r\n                                    setAwardsState(prevState => {\r\n                                        return { ...prevState, awardValue: val }\r\n                                    });\r\n                                }} />\r\n                            </CCol>\r\n                        </CFormGroup>\r\n                    </CForm>\r\n                </CModalBody>\r\n                <CModalFooter>\r\n                    <CButton color=\"secondary\" onClick={() => setModalAwards(false)}>Cancel</CButton>\r\n                    <CButton color=\"primary\" onClick={event => addAwards(event)}>Submit</CButton>\r\n                </CModalFooter>\r\n            </CModal>\r\n\r\n            <CModal show={modalLicense} onClose={setModalLicense} size=\"lg\">\r\n                <CModalHeader>\r\n                    <CModalTitle>Upload MUNWell License</CModalTitle>\r\n                </CModalHeader>\r\n                <CModalBody>\r\n                    <CForm action=\"\" method=\"post\" encType=\"multipart/form-data\" className=\"form-horizontal\">\r\n                        <CFormGroup row>\r\n                            <CCol md=\"3\">\r\n                                <CLabel htmlFor=\"license-file\">License Product Key</CLabel>\r\n                            </CCol>\r\n                            <CCol xs=\"12\" md=\"8\">\r\n                                <CInput type=\"text\" name=\"productKey\" placeholder=\"MUNWell License Product Key\" value={licenseState.productKey} onChange={e => {\r\n                                    const val = e.target.value\r\n                                    setLicenseState(prevState => {\r\n                                        return { ...prevState, productKey: val }\r\n                                    })\r\n                                }} />\r\n                            </CCol>\r\n                        </CFormGroup>\r\n                    </CForm>\r\n                </CModalBody>\r\n                <CModalFooter>\r\n                    <CButton color=\"secondary\" onClick={() => setModalLicense(false)}>Cancel</CButton>\r\n                    <CButton color=\"primary\" onClick={event => addLicense(event)}>Submit</CButton>\r\n                </CModalFooter>\r\n            </CModal>\r\n\r\n            <CModal show={modalPurchase} onClose={setModalPurchase} size=\"lg\">\r\n                <CModalHeader>\r\n                    <CModalTitle>Purchase a MUNWell License</CModalTitle>\r\n                </CModalHeader>\r\n                <CModalBody>\r\n                    <CForm action=\"\" method=\"post\" encType=\"multipart/form-data\" className=\"form-horizontal\">\r\n                        <CFormGroup row>\r\n                            <CCol md=\"12\">\r\n                            MUNWell licenses enables access to all of MUNWell’s features for unlimited committees, unlimited registration entries, unlimited access on a yearly basis, and is accompanied with a live 1-hour MUNWell training session for conference organizers. MUNWell additionally implements a dynamic pricing model to ensure affordability regardless of conference size. To receive a quote, contact our sales department at <a href=\"mailto:contact.munwell@gmail.com\" target=\"_blank\" rel=\"noreferrer\">contact.munwell@gmail.com</a>.\r\n                            </CCol>\r\n                        </CFormGroup>\r\n                    </CForm>\r\n                </CModalBody>\r\n                <CModalFooter>\r\n                    <CButton color=\"primary\" onClick={() => setModalPurchase(false)}>Close</CButton>\r\n                </CModalFooter>\r\n            </CModal>\r\n        </>\r\n    ) : (<p>Waiting for Data...</p>)\r\n}\r\n\r\nexport default Settings\r\n"],"sourceRoot":""}